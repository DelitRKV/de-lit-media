1. Page Faults for FIFO Page Replacement Algorithm
Page reference string:
1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6

Page faults for different frame sizes:

Frame Size	Page Faults
1	20
2	15
3	12
4	10
5	9
6	8
7	7
2. SCAN Disk Scheduling Algorithm
Details:
Cylinders: 0–4999
Current position: 143
Direction: Ascending first.
Requests: 86, 1470, 913, 1774, 948, 1509, 1022, 1750, 130 (sorted: 86, 130, 913, 948, 1022, 1470, 1509, 1750, 1774)
Sequence of Head Movements:
Ascend: 143 -> 913 -> 948 -> 1022 -> 1470 -> 1509 -> 1750 -> 1774 -> 4999.
Descend: 4999 -> 130 -> 86.
Total Head Movement:
∣
143
−
913
∣
+
∣
913
−
948
∣
+
∣
948
−
1022
∣
+
∣
1022
−
1470
∣
+
∣
1470
−
1509
∣
+
∣
1509
−
1750
∣
+
∣
1750
−
1774
∣
+
∣
1774
−
4999
∣
+
∣
4999
−
130
∣
+
∣
130
−
86
∣
∣143−913∣+∣913−948∣+∣948−1022∣+∣1022−1470∣+∣1470−1509∣+∣1509−1750∣+∣1750−1774∣+∣1774−4999∣+∣4999−130∣+∣130−86∣
Distance: 8668 cylinders
3. Code for wait() and exit() System Calls
c
Copy code
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {  // Child process
        printf("Child process running...\n");
        sleep(2); // Simulate some work
        printf("Child process exiting.\n");
        _exit(0); // Exit child process
    } else if (pid > 0) {  // Parent process
        printf("Parent waiting for child to exit...\n");
        int status;
        wait(&status); // Wait for child process
        if (WIFEXITED(status)) {
            printf("Child exited with status: %d\n", WEXITSTATUS(status));
        }
    } else {
        printf("Fork failed!\n");
    }
    return 0;
}
4. Major Activities of OS Regarding Memory Management
Memory Allocation:

Allocate memory to processes when needed.
Techniques include paging, segmentation, and dynamic allocation.
Memory Protection:

Ensure one process cannot access another process's memory.
Use hardware mechanisms like base and limit registers.
Memory Deallocation:

Reclaim memory after a process finishes execution.
Avoid fragmentation using algorithms like garbage collection or compaction.
5. Deadlock in the Dining Philosophers Problem
Necessary Conditions for Deadlock:
Mutual Exclusion:

Chopsticks are shared resources. Only one philosopher can use a chopstick at a time.
Hold and Wait:

A philosopher holding one chopstick waits for another chopstick.
No Preemption:

A philosopher cannot be forced to release a chopstick.
Circular Wait:

Each philosopher waits for a chopstick held by the next in a circular pattern.
Avoiding Deadlock:
Eliminate Circular Wait:
Use an ordering mechanism:

Philosophers must pick up chopsticks in a specific order (e.g., lower-numbered chopstick first).
Eliminate Hold and Wait:

Philosophers must acquire both chopsticks simultaneously or release the held one.
Break Mutual Exclusion:

Allow chopsticks to be shared using a waiter process or semaphore to ensure only two philosophers eat simultaneously.










